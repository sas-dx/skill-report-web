#!/usr/bin/env python3
"""
Ë®≠Ë®àÁµ±Âêà„ÉÑ„Éº„É´ - „É°„Ç§„É≥„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÔºà„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÑ„Éº„É´ÊòáÊ†ºÁâàÔºâ
Ë¶ÅÊ±Ç‰ªïÊßòID: PLT.1-WEB.1

„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÑ„Éº„É´„ÇíË®≠Ë®àÁµ±Âêà„ÉÑ„Éº„É´„Å´ÊòáÊ†º„Åï„Åõ„ÅüÁµ±Âêà„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Åß„ÅôÔºö
1. Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÁÆ°ÁêÜ
2. APIË®≠Ë®àÁÆ°ÁêÜ
3. ÁîªÈù¢Ë®≠Ë®àÁÆ°ÁêÜ
4. Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàê
5. Ë®≠Ë®àÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
"""

import sys
import argparse
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any
import asyncio
from datetime import datetime

# „Éë„Çπ„ÇíËøΩÂä†„Åó„Å¶„É¢„Ç∏„É•„Éº„É´„Çí„Ç§„É≥„Éù„Éº„Éà
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

try:
    from core.config import DesignIntegrationConfig
    from core.exceptions import DesignIntegrationError
    from core.logger import get_logger
    from modules.enhanced_database_manager import EnhancedDatabaseDesignManager
    from modules.database_manager import DatabaseDesignManager
    from modules.api_manager import APIDesignManager
    from modules.screen_manager import ScreenDesignManager
    from modules.report_generator import ReportGenerator
    from modules.integration_checker import IntegrationChecker
    from modules.design_generator import DesignGenerator
except ImportError as e:
    print(f"„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„Éº: {e}")
    print("„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅßÂãï‰Ωú„Åó„Åæ„Åô")
    
    # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®„ÅÆÂü∫Êú¨„ÇØ„É©„Çπ
    class DesignIntegrationConfig:
        def __init__(self, config_path=None):
            self.project_root = Path.cwd()
    
    class DesignIntegrationError(Exception):
        pass
    
    def get_logger(name):
        import logging
        return logging.getLogger(name)
    
    # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®„ÅÆ„ÉÄ„Éü„Éº„ÇØ„É©„Çπ
    class EnhancedDatabaseDesignManager:
        def __init__(self, config):
            self.config = config
            print("‚ö†Ô∏è  Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
        
        def execute_enhanced_workflow(self, verbose=False):
            print("‚ùå Âº∑Âåñ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅØÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            return {'overall_success': False, 'error': '„É¢„Ç∏„É•„Éº„É´Êú™Âà©Áî®'}


class DesignIntegrationTools:
    """Ë®≠Ë®àÁµ±Âêà„ÉÑ„Éº„É´ - „É°„Ç§„É≥„ÇØ„É©„ÇπÔºà„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÑ„Éº„É´ÊòáÊ†ºÁâàÔºâ"""
    
    def __init__(self, config_path: Optional[str] = None):
        """
        ÂàùÊúüÂåñ
        
        Args:
            config_path: Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Éë„Çπ
        """
        self.config = DesignIntegrationConfig(config_path)
        self.logger = get_logger(__name__)
        
        # ÂêÑÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÇíÂàùÊúüÂåñ
        self._initialize_managers()
        
        self.logger.info("Ë®≠Ë®àÁµ±Âêà„ÉÑ„Éº„É´Ôºà„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÑ„Éº„É´ÊòáÊ†ºÁâàÔºâ„ÅåÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü")
    
    def _initialize_managers(self):
        """ÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÇíÂàùÊúüÂåñ"""
        try:
            # Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÁÆ°ÁêÜÔºà„É°„Ç§„É≥Ê©üËÉΩÔºâ
            self.enhanced_db_manager = EnhancedDatabaseDesignManager(self.config)
            
            # Âü∫Êú¨„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÁÆ°ÁêÜÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
            self.db_manager = DatabaseDesignManager(self.config)
            
            # „Åù„ÅÆ‰ªñ„ÅÆË®≠Ë®àÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´
            self.api_manager = APIDesignManager(self.config)
            self.screen_manager = ScreenDesignManager(self.config)
            self.report_generator = ReportGenerator(self.config)
            self.integration_checker = IntegrationChecker(self.config)
            self.design_generator = DesignGenerator(self.config)
            
            self.logger.info("ÂÖ®ÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅÆÂàùÊúüÂåñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü")
            
        except Exception as e:
            self.logger.error(f"ÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
            # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅßÁ∂ôÁ∂ö
            self.enhanced_db_manager = None
            self.db_manager = None
    
    def execute_database_enhanced_workflow(self, verbose: bool = False) -> Dict[str, Any]:
        """
        Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÂÆüË°å
        
        Args:
            verbose: Ë©≥Á¥∞Âá∫Âäõ„Éï„É©„Ç∞
            
        Returns:
            ÂÆüË°åÁµêÊûúËæûÊõ∏
        """
        print("\n" + "="*100)
        print("üöÄ Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å")
        print("="*100)
        
        if not self.enhanced_db_manager:
            print("‚ùå Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            return {'overall_success': False, 'error': '„É¢„Ç∏„É•„Éº„É´Êú™Âà©Áî®'}
        
        try:
            # Âº∑Âåñ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÂÆüË°å
            result = self.enhanced_db_manager.execute_enhanced_workflow(verbose)
            
            # ÁµêÊûú„Çµ„Éû„É™„Éº„ÇíË°®Á§∫
            if result.get('overall_success', False):
                print("\nüéâ Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")
                print(f"ÊàêÂäüÁéá: {result.get('summary', {}).get('success_rate', 0):.1f}%")
                print(f"ÂÅ•ÂÖ®ÊÄß„Çπ„Ç≥„Ç¢: {result.get('summary', {}).get('health_score', 0):.1f}/100.0")
            else:
                print("\n‚ö†Ô∏è  Âº∑Âåñ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅßÂïèÈ°å„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
                if 'error' in result:
                    print(f"„Ç®„É©„Éº: {result['error']}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"Âº∑Âåñ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å„Ç®„É©„Éº: {e}")
            return {'overall_success': False, 'error': str(e)}
    
    def execute_database_basic_workflow(self, verbose: bool = False) -> Dict[str, Any]:
        """
        Âü∫Êú¨„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÂÆüË°å
        
        Args:
            verbose: Ë©≥Á¥∞Âá∫Âäõ„Éï„É©„Ç∞
            
        Returns:
            ÂÆüË°åÁµêÊûúËæûÊõ∏
        """
        print("\n" + "="*80)
        print("üîß Âü∫Êú¨„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å")
        print("="*80)
        
        if not self.db_manager:
            print("‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            return {'overall_success': False, 'error': '„É¢„Ç∏„É•„Éº„É´Êú™Âà©Áî®'}
        
        try:
            # Âü∫Êú¨„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÂÆüË°å
            result = self.db_manager.execute_full_workflow(verbose)
            
            print(f"\nüìã Âü∫Êú¨„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆå‰∫Ü: {'ÊàêÂäü' if result else 'Â§±Êïó'}")
            return {'overall_success': result}
            
        except Exception as e:
            self.logger.error(f"Âü∫Êú¨„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å„Ç®„É©„Éº: {e}")
            return {'overall_success': False, 'error': str(e)}
    
    def generate_comprehensive_database_report(self, verbose: bool = False) -> Dict[str, Any]:
        """
        ÂåÖÊã¨ÁöÑ„Éá„Éº„Çø„Éô„Éº„Çπ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
        
        Args:
            verbose: Ë©≥Á¥∞Âá∫Âäõ„Éï„É©„Ç∞
            
        Returns:
            „É¨„Éù„Éº„ÉàËæûÊõ∏
        """
        print("\nüìä ÂåÖÊã¨ÁöÑ„Éá„Éº„Çø„Éô„Éº„Çπ„É¨„Éù„Éº„ÉàÁîüÊàê")
        
        if not self.enhanced_db_manager:
            print("‚ùå Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            return {}
        
        try:
            report = self.enhanced_db_manager.generate_comprehensive_report(verbose)
            
            if report:
                print("‚úÖ ÂåÖÊã¨ÁöÑ„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü")
                if verbose:
                    self._print_report_summary(report)
            else:
                print("‚ùå „É¨„Éù„Éº„ÉàÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
            
            return report
            
        except Exception as e:
            self.logger.error(f"ÂåÖÊã¨ÁöÑ„É¨„Éù„Éº„ÉàÁîüÊàê„Ç®„É©„Éº: {e}")
            return {}
    
    def optimize_database_design(self, verbose: bool = False) -> Dict[str, Any]:
        """
        „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊúÄÈÅ©Âåñ„ÇíÂÆüË°å
        
        Args:
            verbose: Ë©≥Á¥∞Âá∫Âäõ„Éï„É©„Ç∞
            
        Returns:
            ÊúÄÈÅ©ÂåñÊèêÊ°àËæûÊõ∏
        """
        print("\nüîß „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊúÄÈÅ©ÂåñÂàÜÊûê")
        
        if not self.enhanced_db_manager:
            print("‚ùå Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            return {}
        
        try:
            optimization = self.enhanced_db_manager.optimize_database_design(verbose)
            
            if optimization:
                print("‚úÖ ÊúÄÈÅ©ÂåñÂàÜÊûêÂÆå‰∫Ü")
                suggestions_count = len(optimization.get('suggestions', []))
                print(f"ÊúÄÈÅ©ÂåñÊèêÊ°àÊï∞: {suggestions_count}")
            else:
                print("‚ùå ÊúÄÈÅ©ÂåñÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
            
            return optimization
            
        except Exception as e:
            self.logger.error(f"ÊúÄÈÅ©ÂåñÂàÜÊûê„Ç®„É©„Éº: {e}")
            return {}
    
    def validate_database_design(self, verbose: bool = False) -> Dict[str, Any]:
        """
        „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊ§úË®º„ÇíÂÆüË°å
        
        Args:
            verbose: Ë©≥Á¥∞Âá∫Âäõ„Éï„É©„Ç∞
            
        Returns:
            Ê§úË®ºÁµêÊûúËæûÊõ∏
        """
        print("\nüîç „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊ§úË®º")
        
        if not self.enhanced_db_manager:
            print("‚ùå Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            return {}
        
        try:
            health_report = self.enhanced_db_manager.validate_with_detailed_report(verbose)
            
            print(f"‚úÖ Ê§úË®ºÂÆå‰∫Ü - ÂÅ•ÂÖ®ÊÄß„Çπ„Ç≥„Ç¢: {health_report.overall_score:.1f}/100.0")
            print(f"ÊúâÂäπ„ÉÜ„Éº„Éñ„É´: {health_report.valid_tables}/{health_report.total_tables}")
            
            if health_report.errors_count > 0:
                print(f"‚ö†Ô∏è  „Ç®„É©„ÉºÊï∞: {health_report.errors_count}")
            
            return {
                'overall_score': health_report.overall_score,
                'total_tables': health_report.total_tables,
                'valid_tables': health_report.valid_tables,
                'errors_count': health_report.errors_count,
                'warnings_count': health_report.warnings_count,
                'recommendations': health_report.recommendations
            }
            
        except Exception as e:
            self.logger.error(f"„Éá„Éº„Çø„Éô„Éº„ÇπÊ§úË®º„Ç®„É©„Éº: {e}")
            return {}
    
    def get_database_statistics(self, enhanced: bool = True) -> Dict[str, Any]:
        """
        „Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®àÊÉÖÂ†±„ÇíÂèñÂæó
        
        Args:
            enhanced: Âº∑ÂåñÁµ±Ë®àÊÉÖÂ†±„Çí‰ΩøÁî®„Åô„Çã„Åã„Å©„ÅÜ„Åã
            
        Returns:
            Áµ±Ë®àÊÉÖÂ†±ËæûÊõ∏
        """
        print("\nüìà „Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®àÊÉÖÂ†±ÂèñÂæó")
        
        try:
            if enhanced and self.enhanced_db_manager:
                stats = self.enhanced_db_manager.get_enhanced_statistics()
                print("‚úÖ Âº∑ÂåñÁµ±Ë®àÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü")
            elif self.db_manager:
                stats = self.db_manager.get_statistics()
                print("‚úÖ Âü∫Êú¨Áµ±Ë®àÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü")
            else:
                print("‚ùå Áµ±Ë®àÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
                return {}
            
            # Áµ±Ë®à„Çµ„Éû„É™„Éº„ÇíË°®Á§∫
            if stats:
                print(f"Á∑è„ÉÜ„Éº„Éñ„É´Êï∞: {stats.get('total_tables', 0)}")
                print(f"Á∑è„Ç´„É©„É†Êï∞: {stats.get('total_columns', 0)}")
                
                if enhanced:
                    quality = stats.get('quality_metrics', {})
                    print(f"ÂìÅË≥™„Çπ„Ç≥„Ç¢: {quality.get('overall_quality_score', 0):.1f}/100.0")
            
            return stats
            
        except Exception as e:
            self.logger.error(f"Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº: {e}")
            return {}
    
    def execute_integration_check(self, verbose: bool = False) -> Dict[str, Any]:
        """
        Ë®≠Ë®àÁµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å
        
        Args:
            verbose: Ë©≥Á¥∞Âá∫Âäõ„Éï„É©„Ç∞
            
        Returns:
            Áµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûúËæûÊõ∏
        """
        print("\nüîó Ë®≠Ë®àÁµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å")
        
        if not self.integration_checker:
            print("‚ùå Áµ±Âêà„ÉÅ„Çß„ÉÉ„Ç´„Éº„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            return {}
        
        try:
            # Áµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å
            result = self.integration_checker.check_all_integrations(verbose)
            
            if result.get('overall_success', False):
                print("‚úÖ Ë®≠Ë®àÁµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü")
            else:
                print("‚ö†Ô∏è  Ë®≠Ë®àÁµ±Âêà„ÅßÂïèÈ°å„ÅåÁô∫Ë¶ã„Åï„Çå„Åæ„Åó„Åü")
            
            return result
            
        except Exception as e:
            self.logger.error(f"Áµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº: {e}")
            return {'overall_success': False, 'error': str(e)}
    
    def generate_unified_report(self, verbose: bool = False) -> Dict[str, Any]:
        """
        Áµ±Âêà„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
        
        Args:
            verbose: Ë©≥Á¥∞Âá∫Âäõ„Éï„É©„Ç∞
            
        Returns:
            Áµ±Âêà„É¨„Éù„Éº„ÉàËæûÊõ∏
        """
        print("\nüìã Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàê")
        
        try:
            unified_report = {
                'generated_at': datetime.now().isoformat(),
                'database_report': {},
                'api_report': {},
                'screen_report': {},
                'integration_report': {},
                'summary': {}
            }
            
            # „Éá„Éº„Çø„Éô„Éº„Çπ„É¨„Éù„Éº„Éà
            if self.enhanced_db_manager:
                print("üìä „Éá„Éº„Çø„Éô„Éº„Çπ„É¨„Éù„Éº„ÉàÁîüÊàê‰∏≠...")
                unified_report['database_report'] = self.enhanced_db_manager.generate_comprehensive_report(verbose=False)
            
            # APIË®≠Ë®à„É¨„Éù„Éº„Éà
            if self.api_manager:
                print("üîå APIË®≠Ë®à„É¨„Éù„Éº„ÉàÁîüÊàê‰∏≠...")
                unified_report['api_report'] = self.api_manager.generate_api_report(verbose=False)
            
            # ÁîªÈù¢Ë®≠Ë®à„É¨„Éù„Éº„Éà
            if self.screen_manager:
                print("üñ•Ô∏è  ÁîªÈù¢Ë®≠Ë®à„É¨„Éù„Éº„ÉàÁîüÊàê‰∏≠...")
                unified_report['screen_report'] = self.screen_manager.generate_screen_report(verbose=False)
            
            # Áµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ„É¨„Éù„Éº„Éà
            if self.integration_checker:
                print("üîó Áµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ„É¨„Éù„Éº„ÉàÁîüÊàê‰∏≠...")
                unified_report['integration_report'] = self.integration_checker.check_all_integrations(verbose=False)
            
            # „Çµ„Éû„É™„ÉºÁîüÊàê
            unified_report['summary'] = self._generate_unified_summary(unified_report)
            
            # „É¨„Éù„Éº„Éà‰øùÂ≠ò
            if self.report_generator:
                self.report_generator.save_unified_report(unified_report)
            
            print("‚úÖ Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü")
            
            if verbose:
                self._print_unified_report_summary(unified_report)
            
            return unified_report
            
        except Exception as e:
            self.logger.error(f"Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàê„Ç®„É©„Éº: {e}")
            return {}
    
    def _generate_unified_summary(self, unified_report: Dict[str, Any]) -> Dict[str, Any]:
        """
        Áµ±Âêà„Çµ„Éû„É™„Éº„ÇíÁîüÊàê
        
        Args:
            unified_report: Áµ±Âêà„É¨„Éù„Éº„ÉàËæûÊõ∏
            
        Returns:
            „Çµ„Éû„É™„ÉºËæûÊõ∏
        """
        summary = {
            'overall_health_score': 0.0,
            'total_components': 0,
            'healthy_components': 0,
            'issues_count': 0,
            'recommendations': []
        }
        
        try:
            # „Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Éû„É™„Éº
            db_report = unified_report.get('database_report', {})
            if db_report:
                db_summary = db_report.get('summary', {})
                summary['database_health'] = db_summary.get('overall_health_score', 0.0)
                summary['total_tables'] = db_summary.get('total_tables', 0)
                summary['total_components'] += summary['total_tables']
            
            # APIË®≠Ë®à„Çµ„Éû„É™„Éº
            api_report = unified_report.get('api_report', {})
            if api_report:
                summary['total_apis'] = api_report.get('total_apis', 0)
                summary['total_components'] += summary['total_apis']
            
            # ÁîªÈù¢Ë®≠Ë®à„Çµ„Éû„É™„Éº
            screen_report = unified_report.get('screen_report', {})
            if screen_report:
                summary['total_screens'] = screen_report.get('total_screens', 0)
                summary['total_components'] += summary['total_screens']
            
            # ÂÖ®‰ΩìÂÅ•ÂÖ®ÊÄß„Çπ„Ç≥„Ç¢Ë®àÁÆó
            scores = []
            if 'database_health' in summary:
                scores.append(summary['database_health'])
            
            if scores:
                summary['overall_health_score'] = sum(scores) / len(scores)
            
            # Êé®Â•®‰∫ãÈ†Ö„ÅÆÁµ±Âêà
            for report_key in ['database_report', 'api_report', 'screen_report', 'integration_report']:
                report = unified_report.get(report_key, {})
                if isinstance(report, dict) and 'recommendations' in report:
                    summary['recommendations'].extend(report['recommendations'])
            
            return summary
            
        except Exception as e:
            self.logger.error(f"Áµ±Âêà„Çµ„Éû„É™„ÉºÁîüÊàê„Ç®„É©„Éº: {e}")
            return summary
    
    def _print_report_summary(self, report: Dict[str, Any]):
        """
        „É¨„Éù„Éº„Éà„Çµ„Éû„É™„Éº„ÇíÂá∫Âäõ
        
        Args:
            report: „É¨„Éù„Éº„ÉàËæûÊõ∏
        """
        print("\nüìä „É¨„Éù„Éº„Éà„Çµ„Éû„É™„Éº:")
        summary = report.get('summary', {})
        print(f"  Á∑è„ÉÜ„Éº„Éñ„É´Êï∞: {summary.get('total_tables', 0)}")
        print(f"  ÂÅ•ÂÖ®ÊÄß„Çπ„Ç≥„Ç¢: {summary.get('overall_health_score', 0):.1f}/100.0")
        print(f"  ÊúâÂäπ„ÉÜ„Éº„Éñ„É´: {summary.get('valid_tables', 0)}")
        print(f"  ÁÑ°Âäπ„ÉÜ„Éº„Éñ„É´: {summary.get('invalid_tables', 0)}")
    
    def _print_unified_report_summary(self, unified_report: Dict[str, Any]):
        """
        Áµ±Âêà„É¨„Éù„Éº„Éà„Çµ„Éû„É™„Éº„ÇíÂá∫Âäõ
        
        Args:
            unified_report: Áµ±Âêà„É¨„Éù„Éº„ÉàËæûÊõ∏
        """
        print("\nüìã Áµ±Âêà„É¨„Éù„Éº„Éà„Çµ„Éû„É™„Éº:")
        summary = unified_report.get('summary', {})
        print(f"  ÂÖ®‰ΩìÂÅ•ÂÖ®ÊÄß„Çπ„Ç≥„Ç¢: {summary.get('overall_health_score', 0):.1f}/100.0")
        print(f"  Á∑è„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÊï∞: {summary.get('total_components', 0)}")
        print(f"  „Éá„Éº„Çø„Éô„Éº„Çπ„ÉÜ„Éº„Éñ„É´: {summary.get('total_tables', 0)}")
        print(f"  APIÊï∞: {summary.get('total_apis', 0)}")
        print(f"  ÁîªÈù¢Êï∞: {summary.get('total_screens', 0)}")
        
        recommendations = summary.get('recommendations', [])
        if recommendations:
            print(f"  Êé®Â•®‰∫ãÈ†ÖÊï∞: {len(recommendations)}")


def main():
    """„É°„Ç§„É≥Èñ¢Êï∞"""
    parser = argparse.ArgumentParser(
        description="Ë®≠Ë®àÁµ±Âêà„ÉÑ„Éº„É´Ôºà„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÑ„Éº„É´ÊòáÊ†ºÁâàÔºâ",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
‰ΩøÁî®‰æã:
  # Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„Çπ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å
  python design_integration_tools.py database-enhanced --verbose
  
  # Âü∫Êú¨„Éá„Éº„Çø„Éô„Éº„Çπ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å
  python design_integration_tools.py database-basic --verbose
  
  # ÂåÖÊã¨ÁöÑ„Éá„Éº„Çø„Éô„Éº„Çπ„É¨„Éù„Éº„ÉàÁîüÊàê
  python design_integration_tools.py database-report --verbose
  
  # „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊúÄÈÅ©Âåñ
  python design_integration_tools.py database-optimize --verbose
  
  # „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊ§úË®º
  python design_integration_tools.py database-validate --verbose
  
  # Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàê
  python design_integration_tools.py unified-report --verbose
  
  # Ë®≠Ë®àÁµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ
  python design_integration_tools.py integration-check --verbose
        """
    )
    
    # „Çµ„Éñ„Ç≥„Éû„É≥„Éâ
    subparsers = parser.add_subparsers(dest='command', help='ÂÆüË°å„Åô„Çã„Ç≥„Éû„É≥„Éâ')
    
    # Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„Çπ„ÉØ„Éº„ÇØ„Éï„É≠„Éº
    db_enhanced_parser = subparsers.add_parser('database-enhanced', help='Âº∑Âåñ„Éá„Éº„Çø„Éô„Éº„Çπ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å')
    db_enhanced_parser.add_argument('--verbose', action='store_true', help='Ë©≥Á¥∞Âá∫Âäõ')
    
    # Âü∫Êú¨„Éá„Éº„Çø„Éô„Éº„Çπ„ÉØ„Éº„ÇØ„Éï„É≠„Éº
    db_basic_parser = subparsers.add_parser('database-basic', help='Âü∫Êú¨„Éá„Éº„Çø„Éô„Éº„Çπ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å')
    db_basic_parser.add_argument('--verbose', action='store_true', help='Ë©≥Á¥∞Âá∫Âäõ')
    
    # „Éá„Éº„Çø„Éô„Éº„Çπ„É¨„Éù„Éº„ÉàÁîüÊàê
    db_report_parser = subparsers.add_parser('database-report', help='ÂåÖÊã¨ÁöÑ„Éá„Éº„Çø„Éô„Éº„Çπ„É¨„Éù„Éº„ÉàÁîüÊàê')
    db_report_parser.add_argument('--verbose', action='store_true', help='Ë©≥Á¥∞Âá∫Âäõ')
    
    # „Éá„Éº„Çø„Éô„Éº„ÇπÊúÄÈÅ©Âåñ
    db_optimize_parser = subparsers.add_parser('database-optimize', help='„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊúÄÈÅ©Âåñ')
    db_optimize_parser.add_argument('--verbose', action='store_true', help='Ë©≥Á¥∞Âá∫Âäõ')
    
    # „Éá„Éº„Çø„Éô„Éº„ÇπÊ§úË®º
    db_validate_parser = subparsers.add_parser('database-validate', help='„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊ§úË®º')
    db_validate_parser.add_argument('--verbose', action='store_true', help='Ë©≥Á¥∞Âá∫Âäõ')
    
    # Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàê
    unified_report_parser = subparsers.add_parser('unified-report', help='Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàê')
    unified_report_parser.add_argument('--verbose', action='store_true', help='Ë©≥Á¥∞Âá∫Âäõ')
    
    # Áµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ
    integration_check_parser = subparsers.add_parser('integration-check', help='Ë®≠Ë®àÁµ±Âêà„ÉÅ„Çß„ÉÉ„ÇØ')
    integration_check_parser.add_argument('--verbose', action='store_true', help='Ë©≥Á¥∞Âá∫Âäõ')
    
    # Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó
    stats_parser = subparsers.add_parser('stats', help='Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó')
    stats_parser.add_argument('--enhanced', action='store_true', help='Âº∑ÂåñÁµ±Ë®àÊÉÖÂ†±„Çí‰ΩøÁî®')
    
    # ÂÖ±ÈÄö„Ç™„Éó„Ç∑„Éß„É≥
    parser.add_argument('--config', type=str, help='Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Éë„Çπ')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                       default='INFO', help='„É≠„Ç∞„É¨„Éô„É´')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    try:
        # „É≠„Ç∞„É¨„Éô„É´Ë®≠ÂÆö
        logging.basicConfig(level=getattr(logging, args.log_level))
        
        # Ë®≠Ë®àÁµ±Âêà„ÉÑ„Éº„É´„ÇíÂàùÊúüÂåñ
        tools = DesignIntegrationTools(args.config)
        
        # „Ç≥„Éû„É≥„ÉâÂÆüË°å
        success = execute_command(tools, args)
        
        return 0 if success else 1
        
    except Exception as e:
        print(f"„Ç®„É©„Éº: {e}")
        return 1


def execute_command(tools: DesignIntegrationTools, args) -> bool:
    """„Ç≥„Éû„É≥„ÉâÂÆüË°å"""
    
    if args.command == 'database-enhanced':
        result = tools.execute_database_enhanced_workflow(args.verbose)
        return result.get('overall_success', False)
    
    elif args.command == 'database-basic':
        result = tools.execute_database_basic_workflow(args.verbose)
        return result.get('overall_success', False)
    
    elif args.command == 'database-report':
        result = tools.generate_comprehensive_database_report(args.verbose)
        return bool(result)
    
    elif args.command == 'database-optimize':
        result = tools.optimize_database_design(args.verbose)
        return bool(result)
    
    elif args.command == 'database-validate':
        result = tools.validate_database_design(args.verbose)
        return bool(result)
    
    elif args.command == 'unified-report':
        result = tools.generate_unified_report(args.verbose)
        return bool(result)
    
    elif args.command == 'integration-check':
        result = tools.execute_integration_check(args.verbose)
        return result.get('overall_success', False)
    
    elif args.command == 'stats':
        enhanced = getattr(args, 'enhanced', False)
        result = tools.get_database_statistics(enhanced)
        return bool(result)
    
    else:
        print(f"‰∏çÊòé„Å™„Ç≥„Éû„É≥„Éâ: {args.command}")
        return False


if __name__ == '__main__':
    sys.exit(main())
