// 要求仕様ID: PLT.1-DB.1 - データベース初期データ投入
// 設計書: docs/design/database/data/ 配下のサンプルデータSQLファイル群
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('🌱 データベースの初期データ投入を開始します...')

  try {
    // 1. テナントマスターデータ
    console.log('🏢 テナントマスターデータを投入中...')
    const tenants = await Promise.all([
      prisma.tenant.upsert({
        where: { tenant_id: 'TENANT001' },
        update: {},
        create: {
          tenant_id: 'TENANT001',
          tenant_code: 'acme-corp',
          tenant_name: '株式会社ACME',
          tenant_name_en: 'ACME Corporation',
          tenant_short_name: 'ACME',
          tenant_type: 'ENTERPRISE',
          domain_name: 'acme-corp.com',
          subdomain: 'acme',
          timezone: 'Asia/Tokyo',
          locale: 'ja_JP',
          currency_code: 'JPY',
          status: 'ACTIVE',
          max_users: 1000,
          max_storage_gb: 1000,
          subscription_plan: 'ENTERPRISE',
          monthly_fee: 50000.0,
          code: 'TENANT001',
          name: '株式会社ACME',
        },
      }),
      prisma.tenant.upsert({
        where: { tenant_id: 'TENANT002' },
        update: {},
        create: {
          tenant_id: 'TENANT002',
          tenant_code: 'beta-tech',
          tenant_name: 'ベータテクノロジー株式会社',
          tenant_name_en: 'Beta Technology Inc.',
          tenant_short_name: 'BetaTech',
          tenant_type: 'ENTERPRISE',
          subdomain: 'beta-tech',
          timezone: 'Asia/Tokyo',
          locale: 'ja_JP',
          currency_code: 'JPY',
          status: 'ACTIVE',
          max_users: 200,
          max_storage_gb: 100,
          subscription_plan: 'STANDARD',
          monthly_fee: 15000.0,
          code: 'TENANT002',
          name: 'ベータテクノロジー株式会社',
        },
      }),
    ])

    // 2. 部署マスターデータ
    console.log('📁 部署マスターデータを投入中...')
    const departments = await Promise.all([
      prisma.department.upsert({
        where: { department_code: 'DEPT001' },
        update: {},
        create: {
          department_code: 'DEPT001',
          department_name: '経営企画本部',
          department_name_short: '経営企画',
          department_level: 1,
          department_type: 'HEADQUARTERS',
          sort_order: 1,
          department_status: 'ACTIVE',
          code: 'DEPT001',
          name: '経営企画本部',
          description: '会社全体の経営戦略立案・推進を担当',
        },
      }),
      prisma.department.upsert({
        where: { department_code: 'DEPT002' },
        update: {},
        create: {
          department_code: 'DEPT002',
          department_name: 'システム開発部',
          department_name_short: 'システム開発',
          parent_department_id: 'DEPT001',
          department_level: 2,
          department_type: 'DEPARTMENT',
          sort_order: 2,
          department_status: 'ACTIVE',
          code: 'DEPT002',
          name: 'システム開発部',
          description: '社内システムの開発・保守・運用を担当',
        },
      }),
    ])

    // 3. 役職マスターデータ
    console.log('👔 役職マスターデータを投入中...')
    const positions = await Promise.all([
      prisma.position.upsert({
        where: { position_code: 'POS001' },
        update: {},
        create: {
          position_code: 'POS001',
          position_name: '代表取締役社長',
          position_name_short: '社長',
          position_level: 1,
          position_rank: 1,
          position_category: 'EXECUTIVE',
          authority_level: 10,
          is_management: true,
          is_executive: true,
          position_status: 'ACTIVE',
          sort_order: 1,
          code: 'POS001',
          name: '代表取締役社長',
          description: '会社の最高責任者として経営全般を統括',
        },
      }),
      prisma.position.upsert({
        where: { position_code: 'POS002' },
        update: {},
        create: {
          position_code: 'POS002',
          position_name: '部長',
          position_name_short: '部長',
          position_level: 3,
          position_rank: 1,
          position_category: 'MANAGER',
          authority_level: 7,
          is_management: true,
          is_executive: false,
          position_status: 'ACTIVE',
          sort_order: 3,
          code: 'POS002',
          name: '部長',
          description: '部門の責任者として業務全般を管理',
        },
      }),
      prisma.position.upsert({
        where: { position_code: 'POS003' },
        update: {},
        create: {
          position_code: 'POS003',
          position_name: '課長',
          position_name_short: '課長',
          position_level: 4,
          position_rank: 2,
          position_category: 'MANAGER',
          authority_level: 5,
          is_management: true,
          is_executive: false,
          position_status: 'ACTIVE',
          sort_order: 4,
          code: 'POS003',
          name: '課長',
        },
      }),
      prisma.position.upsert({
        where: { position_code: 'POS004' },
        update: {},
        create: {
          position_code: 'POS004',
          position_name: '一般',
          position_name_short: '一般',
          position_level: 5,
          position_rank: 3,
          position_category: 'STAFF',
          authority_level: 1,
          is_management: false,
          is_executive: false,
          position_status: 'ACTIVE',
          sort_order: 5,
          code: 'POS004',
          name: '一般',
        },
      }),
    ])

    // 4. 職種マスターデータ
    console.log('💼 職種マスターデータを投入中...')
    const jobTypes = await Promise.all([
      prisma.jobType.upsert({
        where: { job_type_code: 'SE' },
        update: {},
        create: {
          job_type_code: 'SE',
          job_type_name: 'システムエンジニア',
          job_type_name_en: 'Systems Engineer',
          job_category: 'ENGINEERING',
          job_level: 'SENIOR',
          required_experience_years: 3,
          sort_order: 1,
          is_active: true,
          code: 'SE',
          name: 'システムエンジニア',
          description: 'システムの設計・開発・テストを担当するエンジニア',
        },
      }),
      prisma.jobType.upsert({
        where: { job_type_code: 'PM' },
        update: {},
        create: {
          job_type_code: 'PM',
          job_type_name: 'プロジェクトマネージャー',
          job_type_name_en: 'Project Manager',
          job_category: 'MANAGEMENT',
          job_level: 'MANAGER',
          required_experience_years: 5,
          sort_order: 2,
          is_active: true,
          code: 'PM',
          name: 'プロジェクトマネージャー',
          description: 'プロジェクトの計画・実行・管理を統括する責任者',
        },
      }),
    ])

    // 5. ロールマスターデータ
    console.log('🔐 ロールマスターデータを投入中...')
    const roles = await Promise.all([
      prisma.role.upsert({
        where: { role_code: 'ROLE001' },
        update: {},
        create: {
          role_code: 'ROLE001',
          role_name: 'システム管理者',
          role_name_short: 'システム管理者',
          role_category: 'SYSTEM',
          role_level: 1,
          is_system_role: true,
          is_tenant_specific: false,
          role_status: 'ACTIVE',
          sort_order: 1,
          code: 'ROLE001',
          name: 'システム管理者',
          description: 'システム全体の管理権限を持つ最上位ロール',
        },
      }),
      prisma.role.upsert({
        where: { role_code: 'ROLE002' },
        update: {},
        create: {
          role_code: 'ROLE002',
          role_name: 'テナント管理者',
          role_name_short: 'テナント管理者',
          role_category: 'TENANT',
          role_level: 2,
          is_system_role: true,
          is_tenant_specific: true,
          role_status: 'ACTIVE',
          sort_order: 2,
          code: 'ROLE002',
          name: 'テナント管理者',
          description: 'テナント内の管理権限を持つロール',
        },
      }),
      prisma.role.upsert({
        where: { role_code: 'ROLE003' },
        update: {},
        create: {
          role_code: 'ROLE003',
          role_name: '一般ユーザー',
          role_name_short: '一般ユーザー',
          role_category: 'BUSINESS',
          role_level: 3,
          is_system_role: true,
          is_tenant_specific: false,
          role_status: 'ACTIVE',
          sort_order: 10,
          code: 'ROLE003',
          name: '一般ユーザー',
          description: '基本的な業務機能を利用できるロール',
        },
      }),
    ])

    // 6. 権限マスターデータ
    console.log('🔑 権限マスターデータを投入中...')
    const permissions = await Promise.all([
      prisma.permission.upsert({
        where: { permission_code: 'PERM_USER_READ' },
        update: {},
        create: {
          permission_code: 'PERM_USER_READ',
          permission_name: 'ユーザー情報参照',
          permission_name_short: 'ユーザー参照',
          permission_category: 'DATA',
          resource_type: 'USER',
          action_type: 'READ',
          scope_level: 'TENANT',
          is_system_permission: true,
          requires_conditions: false,
          risk_level: 1,
          requires_approval: false,
          audit_required: true,
          permission_status: 'ACTIVE',
          sort_order: 1,
          code: 'PERM_USER_READ',
          name: 'ユーザー情報参照',
          description: 'ユーザー情報の参照権限',
        },
      }),
      prisma.permission.upsert({
        where: { permission_code: 'PERM_USER_UPDATE' },
        update: {},
        create: {
          permission_code: 'PERM_USER_UPDATE',
          permission_name: 'ユーザー情報更新',
          permission_name_short: 'ユーザー更新',
          permission_category: 'DATA',
          resource_type: 'USER',
          action_type: 'UPDATE',
          scope_level: 'DEPARTMENT',
          is_system_permission: true,
          requires_conditions: true,
          condition_expression: 'department_id = :user_department_id',
          risk_level: 2,
          requires_approval: false,
          audit_required: true,
          permission_status: 'ACTIVE',
          sort_order: 2,
          code: 'PERM_USER_UPDATE',
          name: 'ユーザー情報更新',
          description: 'ユーザー情報の更新権限（同一部署のみ）',
        },
      }),
      prisma.permission.upsert({
        where: { permission_code: 'PERM_SYSTEM_ADMIN' },
        update: {},
        create: {
          permission_code: 'PERM_SYSTEM_ADMIN',
          permission_name: 'システム管理',
          permission_name_short: 'システム管理',
          permission_category: 'SYSTEM',
          resource_type: 'SYSTEM',
          action_type: 'EXECUTE',
          scope_level: 'GLOBAL',
          is_system_permission: true,
          requires_conditions: false,
          risk_level: 4,
          requires_approval: true,
          audit_required: true,
          permission_status: 'ACTIVE',
          sort_order: 100,
          code: 'PERM_SYSTEM_ADMIN',
          name: 'システム管理',
          description: 'システム全体の管理権限',
        },
      }),
    ])

    // 7. スキルカテゴリマスターデータ
    console.log('🎯 スキルカテゴリマスターデータを投入中...')
    const skillCategories = await Promise.all([
      prisma.skillCategory.upsert({
        where: { category_code: 'CAT001' },
        update: {},
        create: {
          category_code: 'CAT001',
          category_name: 'プログラミング言語',
          category_name_short: 'プログラミング',
          category_name_en: 'Programming Languages',
          category_type: 'TECHNICAL',
          category_level: 1,
          category_path: '/プログラミング言語',
          is_system_category: true,
          is_leaf_category: false,
          skill_count: 25,
          evaluation_method: 'LEVEL',
          max_level: 5,
          color_code: '#007ACC',
          display_order: 1,
          is_popular: true,
          category_status: 'ACTIVE',
          code: 'CAT001',
          name: 'プログラミング言語',
          description: '各種プログラミング言語のスキル',
        },
      }),
      prisma.skillCategory.upsert({
        where: { category_code: 'CAT002' },
        update: {},
        create: {
          category_code: 'CAT002',
          category_name: 'Java',
          category_name_short: 'Java',
          category_name_en: 'Java',
          category_type: 'TECHNICAL',
          parent_category_id: 'CAT001',
          category_level: 2,
          category_path: '/プログラミング言語/Java',
          is_system_category: true,
          is_leaf_category: true,
          skill_count: 8,
          evaluation_method: 'LEVEL',
          max_level: 5,
          color_code: '#ED8B00',
          display_order: 1,
          is_popular: true,
          category_status: 'ACTIVE',
          code: 'CAT002',
          name: 'Java',
          description: 'Java言語に関するスキル',
        },
      }),
      prisma.skillCategory.upsert({
        where: { category_code: 'CAT003' },
        update: {},
        create: {
          category_code: 'CAT003',
          category_name: 'コミュニケーション',
          category_name_short: 'コミュニケーション',
          category_name_en: 'Communication',
          category_type: 'SOFT',
          category_level: 1,
          category_path: '/コミュニケーション',
          is_system_category: true,
          is_leaf_category: true,
          skill_count: 12,
          evaluation_method: 'LEVEL',
          max_level: 4,
          color_code: '#28A745',
          display_order: 10,
          is_popular: true,
          category_status: 'ACTIVE',
          code: 'CAT003',
          name: 'コミュニケーション',
          description: 'コミュニケーション能力に関するスキル',
        },
      }),
    ])

    // 8. スキルマスターデータ
    console.log('⚡ スキルマスターデータを投入中...')
    const skills = await Promise.all([
      prisma.skillItem.upsert({
        where: { skill_code: 'SKILL001' },
        update: {},
        create: {
          skill_code: 'SKILL001',
          skill_name: 'Java',
          skill_category_id: skillCategories[1].category_code,
          skill_type: 'TECHNICAL',
          difficulty_level: 3,
          importance_level: 4,
          code: 'SKILL001',
          name: 'Java',
          description: 'Java言語でのプログラミングスキル',
        },
      }),
      prisma.skillItem.upsert({
        where: { skill_code: 'SKILL002' },
        update: {},
        create: {
          skill_code: 'SKILL002',
          skill_name: 'React.js',
          skill_category_id: skillCategories[0].category_code,
          skill_type: 'TECHNICAL',
          difficulty_level: 3,
          importance_level: 5,
          code: 'SKILL002',
          name: 'React.js',
          description: 'Reactライブラリを使用したフロントエンド開発',
        },
      }),
      prisma.skillItem.upsert({
        where: { skill_code: 'SKILL003' },
        update: {},
        create: {
          skill_code: 'SKILL003',
          skill_name: 'Next.js',
          skill_category_id: skillCategories[0].category_code,
          skill_type: 'TECHNICAL',
          difficulty_level: 4,
          importance_level: 5,
          code: 'SKILL003',
          name: 'Next.js',
          description: 'Next.jsフレームワークを使用したフルスタック開発',
        },
      }),
      prisma.skillItem.upsert({
        where: { skill_code: 'SKILL004' },
        update: {},
        create: {
          skill_code: 'SKILL004',
          skill_name: 'TypeScript',
          skill_category_id: skillCategories[0].category_code,
          skill_type: 'TECHNICAL',
          difficulty_level: 3,
          importance_level: 4,
          code: 'SKILL004',
          name: 'TypeScript',
          description: 'TypeScriptを使用した型安全な開発',
        },
      }),
      prisma.skillItem.upsert({
        where: { skill_code: 'SKILL005' },
        update: {},
        create: {
          skill_code: 'SKILL005',
          skill_name: 'コミュニケーション',
          skill_category_id: skillCategories[2].category_code,
          skill_type: 'SOFT',
          difficulty_level: 2,
          importance_level: 5,
          code: 'SKILL005',
          name: 'コミュニケーション',
          description: 'チーム内外でのコミュニケーション能力',
        },
      }),
    ])

    // 9. 従業員マスターデータ
    console.log('👤 従業員マスターデータを投入中...')
    const employees = await Promise.all([
      prisma.employee.upsert({
        where: { employee_code: 'EMP000001' },
        update: {},
        create: {
          employee_code: 'EMP000001',
          full_name: '山田太郎',
          full_name_kana: 'ヤマダタロウ',
          email: 'yamada.taro@company.com',
          phone: '090-1234-5678',
          hire_date: new Date('2020-04-01'),
          birth_date: new Date('1990-01-15'),
          gender: 'M',
          department_id: departments[1].department_code,
          position_id: positions[1].position_code,
          job_type_id: jobTypes[0].job_type_code,
          employment_status: 'FULL_TIME',
          employee_status: 'ACTIVE',
          code: 'EMP000001',
          name: '山田太郎',
        },
      }),
      prisma.employee.upsert({
        where: { employee_code: 'EMP000002' },
        update: {},
        create: {
          employee_code: 'EMP000002',
          full_name: '佐藤花子',
          full_name_kana: 'サトウハナコ',
          email: 'sato.hanako@company.com',
          phone: '090-2345-6789',
          hire_date: new Date('2021-04-01'),
          birth_date: new Date('1992-03-20'),
          gender: 'F',
          department_id: departments[1].department_code,
          position_id: positions[3].position_code,
          job_type_id: jobTypes[1].job_type_code,
          employment_status: 'FULL_TIME',
          manager_id: 'EMP000001',
          employee_status: 'ACTIVE',
          code: 'EMP000002',
          name: '佐藤花子',
        },
      }),
      // 管理者ユーザー
      prisma.employee.upsert({
        where: { employee_code: 'ADMIN001' },
        update: {},
        create: {
          employee_code: 'ADMIN001',
          full_name: 'システム管理者',
          full_name_kana: 'システムカンリシャ',
          email: 'admin@skill-report.local',
          hire_date: new Date('2025-01-01'),
          department_id: departments[0].department_code,
          position_id: positions[0].position_code,
          employment_status: 'FULL_TIME',
          employee_status: 'ACTIVE',
          code: 'ADMIN001',
          name: 'システム管理者',
        },
      }),
    ])

    // 10. 認証情報の作成
    console.log('🔐 認証情報を作成中...')
    const userAuths = await Promise.all([
      prisma.userAuth.upsert({
        where: { user_id: 'EMP000001' },
        update: {},
        create: {
          user_id: 'EMP000001',
          login_id: 'yamada.taro@company.com',
          password_hash: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.s5uIoS',
          password_salt: 'randomsalt123',
          employee_id: 'EMP000001',
          account_status: 'ACTIVE',
          failed_login_count: 0,
          mfa_enabled: true,
          mfa_secret: 'JBSWY3DPEHPK3PXP',
          session_timeout: 480,
          code: 'AUTH001',
          name: '山田太郎認証',
        },
      }),
      prisma.userAuth.upsert({
        where: { user_id: 'EMP000002' },
        update: {},
        create: {
          user_id: 'EMP000002',
          login_id: 'sato.hanako@company.com',
          password_hash: '$2b$12$XQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.s5uIoX',
          password_salt: 'randomsalt456',
          employee_id: 'EMP000002',
          account_status: 'ACTIVE',
          failed_login_count: 0,
          mfa_enabled: false,
          session_timeout: 240,
          code: 'AUTH002',
          name: '佐藤花子認証',
        },
      }),
      prisma.userAuth.upsert({
        where: { user_id: 'ADMIN001' },
        update: {},
        create: {
          user_id: 'ADMIN001',
          login_id: 'admin@skill-report.local',
          password_hash: '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
          employee_id: 'ADMIN001',
          account_status: 'ACTIVE',
          failed_login_count: 0,
          mfa_enabled: false,
          code: 'AUTH_ADMIN',
          name: 'システム管理者認証',
        },
      }),
    ])

    // 11. ユーザーロール紐付け
    console.log('🔗 ユーザーロール紐付けを作成中...')
    const userRoles = await Promise.all([
      prisma.userRole.upsert({
        where: {
          user_id_role_id: {
            user_id: 'EMP000001',
            role_id: roles[2].role_code,
          },
        },
        update: {},
        create: {
          user_id: 'EMP000001',
          role_id: roles[2].role_code,
          assignment_type: 'DIRECT',
          assigned_by: 'ADMIN001',
          assignment_reason: '新規ユーザー登録時の標準ロール割り当て',
          is_primary_role: true,
          priority_order: 1,
          auto_assigned: true,
          requires_approval: false,
          assignment_status: 'ACTIVE',
          usage_count: 150,
          code: 'UR001',
          name: '山田太郎-一般ユーザー',
        },
      }),
      prisma.userRole.upsert({
        where: {
          user_id_role_id: {
            user_id: 'EMP000002',
            role_id: roles[1].role_code,
          },
        },
        update: {},
        create: {
          user_id: 'EMP000002',
          role_id: roles[1].role_code,
          assignment_type: 'DIRECT',
          assigned_by: 'ADMIN001',
          assignment_reason: 'テナント管理者権限付与',
          is_primary_role: true,
          priority_order: 1,
          auto_assigned: false,
          requires_approval: true,
          approval_status: 'APPROVED',
          approved_by: 'ADMIN001',
          assignment_status: 'ACTIVE',
          usage_count: 75,
          code: 'UR002',
          name: '佐藤花子-テナント管理者',
        },
      }),
      prisma.userRole.upsert({
        where: {
          user_id_role_id: {
            user_id: 'ADMIN001',
            role_id: roles[0].role_code,
          },
        },
        update: {},
        create: {
          user_id: 'ADMIN001',
          role_id: roles[0].role_code,
          assignment_type: 'DIRECT',
          assigned_by: 'SYSTEM',
          assignment_reason: 'システム管理者権限',
          is_primary_role: true,
          priority_order: 1,
          auto_assigned: true,
          requires_approval: false,
          assignment_status: 'ACTIVE',
          usage_count: 500,
          code: 'UR_ADMIN',
          name: 'システム管理者-システム管理者',
        },
      }),
    ])

   
    console.log('📊 スキル記録データを投入中...')
    const skillRecords = await Promise.all([
      prisma.skillRecord.upsert({
        where: {
          employee_id_skill_item_id: {
            employee_id: 'EMP000001',
            skill_item_id: skills[0].skill_code,
          },
        },
        update: {},
        create: {
          employee_id: 'EMP000001',
          skill_item_id: skills[0].skill_code,
          skill_level: 4,
          self_assessment: 4,
          manager_assessment: 3,
          evidence_description: 'Javaを使用したWebアプリケーション開発プロジェクトを3件担当',
          acquisition_date: new Date('2020-06-01'),
          last_used_date: new Date('2025-05-30'),
          skill_category_id: skillCategories[1].category_code,
          assessment_date: new Date('2025-04-01'),
          assessor_id: 'EMP000001',
          skill_status: 'ACTIVE',
          learning_hours: 120,
          project_experience_count: 3,
        },
      }),
      prisma.skillRecord.upsert({
        where: {
          employee_id_skill_item_id: {
            employee_id: 'EMP000001',
            skill_item_id: skills[1].skill_code,
          },
        },
        update: {},
        create: {
          employee_id: 'EMP000001',
          skill_item_id: skills[1].skill_code,
          skill_level: 3,
          self_assessment: 3,
          manager_assessment: 3,
          evidence_description: 'AWS環境でのインフラ構築・運用経験',
          acquisition_date: new Date('2021-03-15'),
          last_used_date: new Date('2025-05-25'),
          expiry_date: new Date('2026-03-15'),
          skill_category_id: skillCategories[0].category_code,
          assessment_date: new Date('2025-04-01'),
          assessor_id: 'EMP000001',
          skill_status: 'ACTIVE',
          learning_hours: 80,
          project_experience_count: 2,
          id: 'SR002',
          is_deleted: false,
          tenant_id: 'TENANT001',
          created_at: new Date(),
          updated_at: new Date(),
          created_by: 'EMP000001',
          updated_by: 'EMP000001',
        },
      }),
    ])

    console.log('✅ データベースの初期データ投入が完了しました！')
    console.log('📋 投入されたデータ:')
    console.log(`   - テナント: ${tenants.length}件`)
    console.log(`   - 部署: ${departments.length}件`)
    console.log(`   - 役職: ${positions.length}件`)
    console.log(`   - 職種: ${jobTypes.length}件`)
    console.log(`   - ロール: ${roles.length}件`)
    console.log(`   - 権限: ${permissions.length}件`)
    console.log(`   - スキルカテゴリ: ${skillCategories.length}件`)
    console.log(`   - スキル: ${skills.length}件`)
    console.log(`   - 従業員: ${employees.length}件`)
    console.log(`   - 認証情報: ${userAuths.length}件`)
    console.log(`   - ユーザーロール: ${userRoles.length}件`)
    console.log(`   - スキル記録: ${skillRecords.length}件`)
    console.log('')
    console.log('🔐 ログイン情報:')
    console.log('   管理者:')
    console.log('     ユーザーID: admin@skill-report.local')
    console.log('     パスワード: password')
    console.log('   テストユーザー1:')
    console.log('     ユーザーID: yamada.taro@company.com')
    console.log('     パスワード: password')
    console.log('   テストユーザー2:')
    console.log('     ユーザーID: sato.hanako@company.com')
    console.log('     パスワード: password')

  } catch (error) {
    console.error('❌ 初期データ投入中にエラーが発生しました:', error)
    throw error
  }
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('❌ 初期データ投入中にエラーが発生しました:', e)
    await prisma.$disconnect()
    throw e
  })
